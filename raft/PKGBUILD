# Maintainer: Sven-Hendrik Haase <svenstaro@gmail.com>
# Contributor: bartus <arch-user-repoá˜“bartus.33mail.com>
# Contributor: pingplug <pingplug@foxmail.com>
# Contributor: cornholio <vigo.the.unholy.carpathian@gmail.com>

pkgname=(curaft python-curaft)
_pkgname=raft
# pkgver=0.19.2
pkgver=23.02
_pkgver=22.12.00
# _pkgver=22.06

pkgrel=7
pkgdesc="RAPIDS Memory Manager"
arch=('x86_64')
url="https://rapids.ai/"
license=('custom')
# depends=('arrow-cuda>=3.0.0' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf' )
# depends=('nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('gcc11' 'rmm' 'nccl' 'cuda' 'cmake' 'boost-libs')
depends=( 'faiss' 'gcc11' 'cudf' 'nccl' 'cuda' 'cmake' 'boost-libs' 'spdlog' 'fmt')
# optdepents=('cuda-cufile')
# depends=('gcc11' 'nvcomp' 'rmm'  'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('nvcomp' 'rmm' 'arrow-cuda'  'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('arrow-cuda' 'rmm' 'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'rmm' 'dlpack' 'boost-libs'  'protobuf' )
# provides=('cudf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cuda-tools' 'cuda-static' 'cmake' 'python-rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda<1.0.0' 'python-pyarrow-cuda' 'gcc9' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf' 'python-versioneer')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf')
# makedepends=('python-cmake_setuptools' 'protobuf-static')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs')
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-${_pkgver}"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-${_pkgver}"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-22.04"
# source=("${_pkgname}::git+https://github.com/rapidsai/raft.git#tag=v${_pkgver}"
source=("${_pkgname}::git+https://github.com/rapidsai/raft.git#branch=branch-${pkgver}"
# "cu.patch"
# "cc.patch"
 "cmake.patch"
# "https://anaconda.org/rapidsai/libcudf/21.08.02/download/linux-64/libcudf-21.08.02-cuda11.4_gf6d31fa95d_0.tar.bz2"
# "build.sh.patch"
#  "bench.patch"
#  "binop.patch"
#  "setup.py.patch"
)
#  "orc.hpp.patch"
#  "remove_keys.cu.patch"
#  "from.arrow.cu.patch"
#  "cudf_setup.py.patch" "gather.cu.patch" "ipc.cpp.patch" "reader_impl.cu.patch")
#  "cudf_setup.py.patch" "nvst_CMakeLists.txt.patch")
#  "from_arrow.cpp.patch"

sha256sums=( 'SKIP' 'SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP')
# sha256sums=('SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP')
options=('staticlibs')


prepare() {
  cd "${srcdir}"/raft
git submodule update --init --recursive
  cd "${srcdir}"
#  patch -p0 < cu.patch
# patch -p0 < cc.patch
# patch -p0 < binop.patch
#  patch -p0 < build.sh.patch
  patch -p0 < cmake.patch
#  patch -p0 < setup.py.patch
#   patch -p0 < nvst_CMakeLists.txt.patch
#   patch -p0 < gather.cu.patch 
#   patch -p0 < orc.hpp.patch 
#  patch -p0 < cpp.patch
#  patch -p0 < cudf_setup.py.patch
#  patch -p0 < from_arrow.cpp.patch
#   patch -p0 < reader_impl.cu.patch
#   patch -p0 <  from.arrow.cu.patch
#    patch -p0 < ipc.cpp.patch
export CC=/usr/bin/gcc
export CXX=/usr/bin/g++
    export SNAPPY_INCLUDE_DIRS=/usr/include
    export OPENSSL_ROOT_DIR=/usr
    export LIBRAFT_BUILD_DIR="${srcdir}"/raft/cpp/build

}

build() {
  cd "${srcdir}/raft"
#    ./build.sh clean
#  ./build.sh --disable_nvtx -v -n libcudf cudf dask_cudf
# PARALLEL_LEVEL=3 ./build.sh -v -n libcudf 
#  -DCMAKE_CXX_STANDARD="14" \
#  -DCMAKE_CXX_STANDARD_REQUIRED=ON \
#  -DCMAKE_CXX_EXTENSIONS=OFF \ 
   export PARALLEL_LEVEL=12
  export LDFLAGS="${LDFLAGS} -llapack -lblas -lpthread  -larcher -lomptarget  -L/opt/intel/oneapi/mkl/latest/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lomp -lompd "

    cmake -S "${srcdir}"/raft/cpp -B "${srcdir}"/raft/cpp/build \
          -DCMAKE_INSTALL_PREFIX="/usr" \
          -DCMAKE_CUDA_ARCHITECTURES=86 \
          -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-11 \
          -DCMAKE_C_COMPILER=/usr/bin/gcc \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
          -DOPENSSL_CRYPTO_LIBRARY=/usr/lib/libcrypto.so \
          -DRAFT_COMPILE_LIBRARIES=ON \
          -DRAFT_ENABLE_NN_DEPENDENCIES=ON \
          -DRAFT_NVTX=ON \
          -DRAFT_COMPILE_NN_LIBRARY=ON \
          -DRAFT_COMPILE_DIST_LIBRARY=ON \
          -DRAFT_USE_FAISS_STATIC=OFF \
          -DRAFT_ENABLE_thrust_DEPENDENCY=ON \
          -DUSE_NVTX=ON \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=OFF \
          -DDISABLE_DEPRECATION_WARNING=ON \
         -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_BUILD_TYPE=Release  \
         -DFIND_RAFT_CPP=ON 

    
    cd "${srcdir}"/raft/cpp/build
    find . -name flags.make | xargs  sed -i -e 's/--generate-code=arch=compute_60,code=\[sm_60\] --generate-code=arch=compute_70,code=\[sm_70\] --generate-code=arch=compute_75,code=\[sm_75\] --generate-code=arch=compute_80,code=\[sm_80\]/--generate-code=arch=compute_86,code=\[sm_86\]/g'
    find . -name flags.make | xargs  sed -i -e 's/--generate-code=arch=compute_60,code=\[compute_60,sm_60\] --generate-code=arch=compute_70,code=\[sm_70\] --generate-code=arch=compute_75,code=\[sm_75\] --generate-code=arch=compute_80,code=\[compute_80,sm_80\]/--generate-code=arch=compute_86,code=\[sm_86\]/g'
    find . -name compile_commands.json | xargs  sed -i -e 's/-Xcompiler=-fopenmp=libomp//g'
    find . -name flags.make | xargs  sed -i -e 's/-Xcompiler=-fopenmp=libomp//g'

  # cmake --build . -j$(nproc) -v
  # cd "${srcdir}"/cudf/cpp/build/_deps/rmm-src/include
  # rm -rf rm
  # cp -pr /usr/include/rmm .

  # patch -p0 < bench.patch

#  ./build.sh -v -n libcudf # cudf
#   ./build.sh -v -n libcudf
#  ./build.sh -v -n libcudf

}

package_curaft() {
  # provides=('nvcomp' 'rmm')
  cd "${srcdir}"/raft/cpp/build

  # make DESTDIR="${pkgdir}" install_cudf
  export PARALLEL_LEVEL=12
  # export CUB_NS_QUALIFIER="::cub"

  # cmake --build . -j1 --target install DESTDIR="${pkgdir}"  -v
  # make  install DESTDIR="${pkgdir}/usr"
  # cmake --build . -j$(nproc) --target install DESTDIR="${pkgdir}"  -v
  # cmake --build . -j1 --target install DESTDIR="${pkgdir}"  -v
#  cd "${srcdir}"/cudf/python/cudf
  # CUDA_HOME=/opt/cuda LD_LIBRARY_PATH=/opt/cuda/lib64:${LD_LIBRARY_PATH} python setup.py build_ext -j${PARALLEL_LEVEL:-1} --library-dir=${srcdir}/cudf/cpp/build install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}"
  export CFLAGS="${CFLAGS} -Wunknown-pragmas"
  export LDFLAGS="${LDFLAGS} -llapack -lblas -lpthread  -larcher -lomptarget  -L/opt/intel/oneapi/mkl/latest/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lomp -lompd "
  export CXXFLAGS="${CXXFLAGS} -Wunknown-pragmas"
  # make -j1 -C .  DESTDIR="${pkgdir}" install VERBOSE=1
  LANG=C make -j14 -C .  DESTDIR="${pkgdir}" install VERBOSE=1


  install -Dm644 ${srcdir}/raft/LICENSE ${pkgdir}/usr/share/licenses/curaft/LICENSE
  rm -rf ${pkgdir}/usr/test
  # rm -rf ${pkgdir}/usr/include/cutlass
  # rm -rf ${pkgdir}/usr/lib/cmake/NvidiaCutlassConfig.cmake
  # rm -rf ${pkgdir}/usr/lib/cmake/NvidiaCutlassTargets.cmake

  if [ ! -d ${pkgdir}/usr/lib/cmake/cuco ]; then
     cd ${pkgdir}/usr/lib/cmake
     cp -pr /usr/lib/cmake/cuco .
     cd ${pkgdir}/usr/include
     cp -pr /usr/include/cuco .
  fi
  if [ ! -f ${pkgdir}/usr/lib/cmake/NvidiaCutlassConfig.cmake ]; then
     cd ${pkgdir}/usr/lib/cmake
     cp -pr /usr/lib/cmake/NvidiaCutlassConfig.cmake .
     cp -pr /usr/lib/cmake/NvidiaCutlassTargets.cmake .
     cd ${pkgdir}/usr/include
     cp -pr /usr/include/cutlass .
  fi
    

}



package_python-curaft()
{
  # depends=('cudf' 'python-cupy' 'python-faiss' 'python-dask-cuda' 'python-kvikio' 'python-nvtx' )
  depends=('python-cudf' 'curaft' 'python-cupy'  'python-pyarrow' 'python-dask-cuda'  )


  cd "${srcdir}"/raft/python/pylibraft

  export LD_LIBRARY_PATH=${srcdir}/raft/cpp/build:/opt/cuda/lib64:$LD_LIBRARY_PATH
  CC=/usr/bin/gcc CXX=/usr/bin/g++ \
  CMAKE_CUDA_ARCHITECTURES=86 \
  CMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-11 \
  CUDAHOSTCXX=/usr/bin/g++-11 \
  python setup.py build_ext --inplace --  -DCMAKE_PREFIX_PATH="${pkgdir}"/../curaft/usr   -Draft_DIR="${srcdir}"/raft/cpp/build  -DCMAKE_CUDA_ARCHITECTURES=86 -DFIND_RAFT_CPP=ON  -- -j${PARALLEL_LEVEL:-1}

      # PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext --inplace -j${PARALLEL_LEVEL}
  CC=/usr/bin/gcc CXX=/usr/bin/g++ \
  python setup.py install  --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1  --  -DCMAKE_PREFIX_PATH="${pkgdir}"/../curaft/usr -Draft_DIR="${srcdir}"/raft/cpp/build   -DCMAKE_CUDA_ARCHITECTURES=86 -DFIND_RAFT_CPP=ON  # -- -j${PARALLEL_LEVEL:-1}



  cd "${srcdir}"/raft/python/raft-dask
  
  export LD_LIBRARY_PATH=${pkgdir}/../curaft/usr/lib:/opt/cuda/lib64:$LD_LIBRARY_PATH
  PYTHONPATH="${pkgdir}"/usr/lib/python3.10/site-packages \
  CMAKE_CUDA_ARCHITECTURES=86 \
  CMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-11 \
  CC=/usr/bin/gcc CXX=/usr/bin/g++ \
  CUDAHOSTCXX=/usr/bin/g++-11 \
  python setup.py build_ext --inplace --  -DCMAKE_PREFIX_PATH="${pkgdir}"/../curaft/usr   -Draft_DIR="${srcdir}"/raft/cpp/build  -DCMAKE_CUDA_ARCHITECTURES=86 -DFIND_RAFT_CPP=ON  -- -j${PARALLEL_LEVEL:-1}
  CC=/usr/bin/gcc CXX=/usr/bin/g++ \
  python setup.py install  --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1  --  -DCMAKE_PREFIX_PATH="${pkgdir}"/../curaft/usr -Draft_DIR="${srcdir}"/raft/cpp/build   -DCMAKE_CUDA_ARCHITECTURES=86 -DFIND_RAFT_CPP=ON  # -- -j${PARALLEL_LEVEL:-1}

  # PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext  -- -DCMAKE_PREFIX_PATH=/usr -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-11 -DCMAKE_CUDA_ARCHITECTURES=86 -j12 --library-dir=${LIB_CUDF_BUILD_DIR} install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1

  # install -Dm644 ${srcdir}/cudf/cpp/src/utilities/legacy/*.hpp ${pkgdir}/usr/include/cudf/utilities/legacy/
  install -Dm644 ${srcdir}/raft/LICENSE ${pkgdir}/usr/share/licenses/python-curaft/LICENSE
}




# vim:set ts=2 sw=2 et:
